{{- define "enum" -}}

{{- $name := .Name -}}
{{- $type := .Type -}}
{{- $fields := .Fields -}}
{{- $opts := .Opts -}}

{{- if $opts.types -}}
type {{$name}} {{$type}}
{{- end }}

const (
{{- range $_, $field := $fields }}
	{{- if gt (len $field.Comments) 0 -}}
		{{- range $_, $comment := $field.Comments }}
			// {{ replaceAll $comment "\"" "'" }}
		{{- end }}
	{{- end }}
	{{$name}}_{{.Name}} {{$name}} = {{$field.Value}}
{{- end}}
)

var EnumFrom{{$name}} = map[{{$name}}]string{
{{- range $fields}}
	{{.Value}}: "{{.Name}}",
{{- end}}
}

var EnumTo{{$name}} = map[string]{{$name}}{
{{- range $fields}}
	"{{.Name}}": {{.Value}},
{{- end}}
}

func (x {{$name}}) String() string {
	return EnumFrom{{$name}}[{{$name}}(x)]
}

func (x {{$name}}) MarshalText() ([]byte, error) {
	s, ok := EnumFrom{{$name}}[{{$name}}(x)]
	if !ok {
		return nil, fmt.Errorf("%v is not a valid {{$name}}", string(x))
	}
	return []byte(s), nil
}

func (x *{{$name}}) UnmarshalText(b []byte) error {
	var ok bool
	*x, ok = EnumTo{{$name}}[string(b)]
	if !ok {
		return fmt.Errorf("%v is not a valid {{$name}}", string(b))
	}
	return nil
}

func (x *{{$name}}) Is(values ...{{$name}}) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

{{- end -}}
